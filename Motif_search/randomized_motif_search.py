#!/usr/bin/env python
# coding: utf-8

import random
# import helper functions
from motif_search_basics import Freq, Profile,Score


def ProfileRandomKmer(text, profile, k):    
    nuc_dict = {'A': 0, 'C':1, 'G':2, 'T':3}
    prob_list = []
    kmers = []
    for i in range(len(text)-k+1):
        pattern = text[i:i+k]
        prob = 1
        for j in range(k):
            letter = pattern[j]
            prob *= profile[j][nuc_dict[letter]]
        prob_list.append(prob)
        kmers.append(pattern)
        
    prob_dist = []
    for elem in prob_list:
        elem = elem / sum(prob_list)
        prob_dist.append(elem)
    return random.choices(kmers, weights = prob_dist)[0]


# In[175]:


def GibbsSampler(DNA, k, t, N):
    motifs = []
    best_motifs = []
    # randomly select kmers
    for dna in DNA:
        i = random.randint(0, len(dna) - k)
        motif = dna[i:i+k]
        motifs.append(motif)
        best_motifs.append(motif)
    #best_motifs = motifs
    #print('initial:' + str(Score(best_motifs)))
    #print(best_motifs)
    
    for j in range(N):
        i = random.randint(0, t-1)
        temp_motifs = motifs[0:i] + motifs[i+1:len(motifs)]
        profile = Profile(temp_motifs)
        motif_i = ProfileRandomKmer(DNA[i], profile, k)
        motifs[i] = motif_i
        
        #print(Score(motifs), Score(best_motifs))
        if Score(motifs) < Score(best_motifs):
            best_motifs = []
            for motif in motifs:
                best_motifs.append(motif)
            #print('new best:' + str(Score(best_motifs)))
    
    #print('end:' + str(Score(best_motifs)))
    #print(best_motifs)
    return best_motifs

# In[167]:


count = [0] * (10-k+1)
k = 8

for _ in range(10000):
    num = random.randint(0, 10 - k)
    #num = random.choices([0,1,2,3], weights = [0.1,0.2,0.3,0.4])[0]
    count[num] += 1
print(count)

# In[173]:


k = 15 
t = 20 
N = 2000

# In[ ]:


DNA_input = 'AAATCGAAGCGTTATCTCACCGGACGAACTGATGGCTTGACGGTCGGAACCCACTGCTACAAGATGGGAATAATGATGAAAGCTGCTCTAATTGGTGGACAACTCCCTTCGTACGCAATCTCAGGGGAACCGACATCTGTTGGCTATATGGGGTATACAAATATACAGCGATAGCCGCAGAGTTAGAAGGATTTATATACCGAAATCCGCGGGTAAGAAATGGGGTGCTGTGATTTGGACTCCGGCTCGCGGGCTAGGCTGCGGATGAACTACGTAATAATGCGTGTCCGGAACCTACAGAAATCGAAGCGTTAT
CTCACCGGACGAACTGATGGCTTGACGGTCGGAACCCACTGCTACAAGATGGGAATAATGATGAAAGCTGCTCTAATCGCTCTAAACTAATTTGGTGGACAACTCCCTTCGTACGCAATCTCAGGGGAACCGACATCTGTTGGCTATATGGGGTATACAAATATACAGCGATAGCCGCAGAGTTAGAAGGATTTATATACCGAAATCCGCGGGTAAGAAATGGGGTGCTGTGATTTGGACTCCGGCTCGCGGGCTAGGCTGCGGATGAACTACGTAATAATGCGTGTCCGGAACCTACAGAAATCGAAGCGTTAT
CGCAGGTTGTGAGGTATCATTGCCCGATGCAATAAGACATGCTATACCAGATACTAGGGCGGCGGGGACGCCTGGACGTTGCGGCTAAGGTCAAGTAGCGTGATCGTTCTTGTTTAACAGTGGGTTGTCCAACACTGATTAATCAACTCAAGACCGAGCCAGTCACAAGAGATTCAATGGGGGCGGTAGCGCTAGTTCTGGGGAGTGCGTATAACAACGGACTGTCATTTAACCTCTACGTTTCTAGGGTCCTCATAAACTAATTGTACTAGCACCACGGAGCGGATTTTATATTGGACAGTTGAGTTCCGTGAT
GAGATTCAGGTCTATAATGATGAATGGCATATAGCAACCCACGACATGCGTACATCCATCCTGTGGTAGGCTGCGATTAGAGTAGCACGCATAAGTAGCCCGTAACCCTCGACGCTCCACTGCGTATACCCTTTCGAAATAAACTTGACGTAACGTGCTGCCCCTCACTGCAAACCTTTCCGCGCTTGATTGCGCCATGCGCGCCGTGTGGTATCGGTAGCTGGTCTCTTGTTTCGCATAGAAATATAACTGACGAGTTCGGCGAAATGGAGTCCAATGCAGATCGAGGTCTTTGGACCACCGGATCAGCGGCGG
ATATCGGATCGTGGACCGGAAACCTCTCGGGCTACAGACACCTGCGGATCAGTACCGCCATTTACGATGGTGAGGACATCTTAGTGTGGTGTTGTTCGTGCATCCCCTTAGGCTACGGGTAACTAGAATAGAAGGGCGACGCCCAGACCTTTAGAAGCCGCCGCCCGCCAGTTACGGGCCCCATATCTTTCGCAAAGGTGAGTGGTATAACTAGATCTGCCGCTGTTATGGGATGGGTCGTTGGCACGATACGCCCCCTGTCGAAACCCACTAATATCCGATGAAAGGACTTGTATCTGGTCTATATTATACTTC
GCGAGCGGCGGCGTCTTGTAGACCCTTCGAATAAACTAATAGAGCTTCTTAGGGGCTGAGAGCTAATGGTTACTGTGACCCAATGCTCGGGCAGGCATTCGAAATTTTTCTGCTCCTAGAGGTCCAGTACGTTCCTCGGAGTACTGTGGTTGAGAACTTGCCTCGAGAATTAAAGAGTCTAGCTTACTAGACACATTAGGAGTCTTTGGGACCCGACTGCTCAAGGGTTGGGTAGTTAGGGACCCTCGGTCACATCTGCACTGACCCGCCAGTACACGAATCGCTTCAGTTAAAAAGCTTTTTAGAGAGGCTATT
CAGTGCCCCTTATTCAGGTCCCCATCGAAATCCTCTAATTGTCTCCCGTCAAGGCCCGTTGGGCATACTATCTGCCCCATCCTTTCTGAAGCCCGTGACCTTGCACACTGGCAATTTGACAACACGGTCGACCCTGGTTCGGACTGTACCAGGTAGAAGTGTGCGCTATGTTAGTTGGTTAAAAAGGGCGTCTGCTGGCCATCCAAGTTATTATGAGTTTCTATTAACGCTAATGGGACAAGCATTCATTCCTTCGTTGGGGCTGGGCTCCCGAAACGCTTGCAGCTTCGTATATAAACTCCGCTAGGCGCGTAG
TGAACAAAGCAAGGGTACCGCATTTATCTGTAATCTTATCGGTAAAATGGGCACTTAGTGTGCGGGGGGTACGAGATTTGGATGGATTTGGGACACGGAACAGATAATATTTAGATGATTACCACTAAGATGCTTACCGTTTATGCTCGAAATAACGAAATGATGATGTAGCCGAGTTATAACCAACCGTAATGATGCGGGTAAACATCGCCATGCCTGCTCTTCAGGCGTGAGGCGGAGCCACATGCCCGACCTGTCGAACAGCGGATCATAGGCGTAAGGCTGCAGAGGAGATCTGTTTCCGAATGCGGACAG
GACATGTTGTCAGGTCTGGGTTAAGTATCTCAGGGAACTCTTTGCTTTCGCCATAGGCATTAGTACCGGCCCACCCTTGGCTGGTAGGATCACTGGAAAGCCAGGTAACCCCGAATCCAATCAACTCGCCTTTTCATTGTCCGGGCTATGCCCGTGCGGGGATATTGAGTCATCCTCAACCACCGTCTAGGAATCGAAGCCAACTAATCAAGAAGAGCCAGGATGCGTACATAGTCCGGTCACATCTAATAGGGTTGATGTCCGACAACGACCGACCGGGAGTTCTAGAGACGGAAGAGATCTTTCCCAGCCGCG
ATCCTGTAGTTGCCTATTGACGTAGTTGTAATCAATGGTACCCAGTGGGAGTGGAGCCTCGATACTTCATGGAGCCTCCGTTGATGGCATTGGGCAATACTCGTTTGGAGGGGCGGAAATGTGTGGATAAATAAACTAATACATATTCGATCTAAAGTAGGCTCCTGACGCTACGGTTCGAAGTTTAGAGGCCGGGCTGATTACGGGTCGCATTTGACAAAAACGGCACGGTGCTCCCCCCACTAGTGCCCTTGGACGGGGTCTTCCAGGAGGGTGTGGAGTGTGGGCTTGAGAGGCGAAGTCCAGGTCTAAGGC
ACAGTGCTTAAAATCTGTCGATGTACAATGTGGGTTCCATCCAACCTCCGTATGCTTCTTTAATACCGTCTTGCCAACCTCAGCGCGCTTAGTATAGGGTCGGTTTTCGAAATAAACGCTTACACCCAGCTGACTCCATGCCATGACCCGTCCAGGACAGGTTGATTTGTCTTGGTCGGAATAGATTTCCATGCTGTTCGGGGTGTACCATATGCTCCCAAGACTAATAAACGGGAGGGGGGATTAGGCTCCAACTCATTGCTATGTCAGTGGTGCGAATCGCTTTATTCCGTGATCATACACGATCGTCTAATC
GATCGTCAGCGTTACTAGAAAGACGAGTTAGGGCGCCAGATTATTTCTTAAAGGCAAGCTCAGGAGCAGAGAGGAGTTTCGACGAAAACTAATCGGGACGACAAAAGCCGGTGCCAGAAGACCAAAGGGTCGCTCGAGAATGCACATAACAATAGGGAGCGGAATTTACTTCTTCTGTGCTGACCAATGATTGCCTTTCAAGCAAGCCTAATCCCGTGCGAGAGTACATAGAAGGGCTGACATTCCGTCATTAGTAGCAAAGGAAGAGTCAATCAATCGCGCCTCCCCGCGTGGGGCCGAAAAGGGGGTTTATTA
GGTCGGTAAGGAGTCGGGGATAACGTAGTTTCCGACTGCAGACTACTCGATTGAAACTAATCCTCGTCCAACTCTCCCAGGAGACGCTTAAGGGAATAAACCGGAAGCGGTATCACAGGCATCTTACGCCTCATGCCGCGCAGATTCCCTCCGGAGCTAATAGCCGAGAACGTACTATGGCGAGACCTGCATATAAGTATCCGGTTGAAGACACACTCCTTCCAAACTGAGACGATTCTAGTTGTCTCCTTGTTTTTGCTACTGTACACTTCTCTGTCGCTCCATGTATAAACTACTCGGCTCGGCAACCGTACT
TATAGACTGTGGATTTTTTGCCTCGCTCTTGCCAAAAGACCCTACGTATAGGATCCCGTGGCCATCGGCATTCTGGGAGATGCAAGTCAGACATTATGTAAGGAGCCCACCGAGGTGGCTTCCGGCGATGACTTTTCATAGACATCGGGTACTTGCTCTCAGATTGCCCTTTTCTGGAACATTTTTATCGAAGGCAACTAATTGGCTAAATACAGTGTTCGAGTTTTGTATCTAGCCAAAGTCAAAGAGATTATTGTGGGGATTCCATTAATAGGCTAGAGCCTAGGCCAGGCGATAATAGGTAGGTGCGGTTCG
CCGGAGGCATAACTAGCGATCGGAGTGACTAAGCCGCTAGAATCTCCCAAGGTAACTACATCGAAAGTGACTAATTGAATACTTAGTCCCGGACCAATACGTACTCACATCCAACCCTAGTAGACAGGCGGTTAGACCCACTTGGTAAATCAGTGCCACCGCTTTTATATCCGGAGGTTAAGTACGTGACAGATGGTCACAGTCTAAAATCCCGTACTCCCTTCCAGCGATTTAAAAGAATATACTGATTCTAGAGAGATGAGTATGCTACTCGCCGTACCACCGCCGACCCTACTGCTTAGGGACGCCTTACGG
GTACACATCTTAGCAAATGCTCAGGTCTCAGCTGCTATATTCGTAGTTCTAAAGATGGGGTGGAGGTGGCGAAGCACTTCAAATTGCAACCGGAACGGAGCCCCAGGTCTAGTCTTGCTAAGAAATCATCTTTTAGATCATATTGCGGGAACTTCGAAATAAAGCCATAACCCATCCTTATCTAATTTAAAGCAAGTAAGCAGATCGTTATACCATGGCTTTATTCTACGGTGTGCCCACAGTGACGCCCCCCGATTATCTTGGCAGGGTTGCGCGAAAGGATTTCTATTCCAGTACAGGGCTATTTGACGAGCA GTAAATGCGTATGGTGCGCTTCCTTATTGCGCCTGGCCCGAAGTGTATAGTAGATTCATAACATACTTACAATGAGCGCAATATGAGCCTATGGATTAATTTGTTAGAGAATTCTAAGATACGGATCTGAGACGGGGCTTCAGCTAATTTTGCAGATACCTACTCGTCCTGTTAAGAACCATTTATATTGGGGCGGATTGCTTCTACCTCCGTAGCTCGGGGTAAACTAATATGAATAGCAAACTCCGCCGCTCAGACTGTCATGCTACTGTCACCTTAGTTTTACTTTTAGCATCGTAGGACGGATATGGTGCC
CCTGACTAGACGGGATGTTACCACCAAGCCGAAATAAACTATACGCTAGAGGTTTGCCTAGTTCGTATAAAGTACTAATGGACGATCGTTGGCGCAAAGGACGCACCCACACGTCCTGCCAACCAAACAAATGTTCCCGCTCCCATAGTACATGAAGTTTGGCCCTAGAGTCCTAGTCCACACACTATGAACCAGTCTAAGAGAGAATTGGGTGCGCGGAGTGGAGGCGGAAGTGAGTGTGCCCCCTATAGCTCGAGATTCTGAACTCCGGGATTATGGGTCGCTAGCTCCAATGTCTATTGCCTCCTCCAGCCT
CCTGTCTCCATAGTATACCACCGTACGGTGTTGTTTTGTATGCCAGGCGATGGGGATGTACTCGGACCCAACCGGTCCATTTCATATGCCTCTACCCTGGTGTTCTAGTAATATCGGTGGCGGCAACTCTACTGAGGTGTGATAGGACAACCCCCCGCCAGTGGTATGAGGGAGAAATAAACTAACGCCCATCGTTTAAATCTGTATGGTCGGGTTGGATGCCTAGTCCAGCGGAGCCAAGCCAGGACTGGAATGTCACACAGACCACCGTTTGTAGACTGTCGAATATATACTTCATTAAGTAGCTGGAGCCGT AGGACAACGGACTCGGTGGCAGAGAGGCAAATGCGTACAGCTGTTGGACCTACCGTCATCCTTTTCCACATGAGTGGATGGTGAGAGCGGGAGGCTCATGCCCTCACCAATAAAATTCGGCTTAAGGAGGCATGTCGGTTGGAGTCGGTACTCCTCCTACAAGTTCCTAATAAAGAATCGAAATATGTTAATGAGTGTAAGTATGGCGGAGCAGTCGGTCTTTTCAGGTTCAAACATGCTGGTCAGCGAGATAATAATATGACTCCTGACTCTTATATATTAGATACATAAACGACTTAGTCTGTGGGATGGTAT'

# In[108]:


DNA = DNA_input.split(" ")
len(DNA)

# In[176]:


for result in GibbsSampler(DNA, k, t, N):
    print(result)

# In[ ]:



