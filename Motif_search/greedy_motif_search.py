#!/usr/bin/env python
# coding: utf-8

# import helper functions
#from motif_search_basics import Freq, Profile,Score
from motif_search_basics import *
import sys

def ProfileMostProbableKmer(text, k, profile):
    '''
    Find a k-mer that was most likely to have been generated by Profile among all k-mers in Text,
     base on the probability of each k-mer.
    :param text:
    :param k:
    :param profile:
    :return:
    '''
    nuc_dict = {'A': 0, 'C':1, 'G':2, 'T':3}
    max_prob = 0
    first_zero = True
    prob_str = ''
    for i in range(len(text)-k+1):
        pattern = text[i:i+k]
        prob = 1
        for j in range(k):
            letter = pattern[j]
            prob *= profile[j][nuc_dict[letter]]
        if prob > max_prob:
            max_prob = prob
            prob_str = pattern
        if max_prob == 0 and first_zero:
            prob_str = pattern
            first_zero = False
    return prob_str


def GreedyMotifSearchPseudocount(DNA, k, t):
    # start with motif formed by first kmers in each dna
    best_motifs = []
    for dna in DNA:
        best_motifs.append(dna[0:k])

    for i in range(len(DNA[0]) - k + 1):
        motif = DNA[0][i:i+k]
        motif_mat = []
        motif_mat.append(motif)

        for j in range(1, t):
            profile = Profile(motif_mat)
            prob_kmer = ProfileMostProbableKmer(DNA[j], k, profile)
            motif_mat.append(prob_kmer)
        if Score(motif_mat) < Score(best_motifs):
            best_motifs = motif_mat
    return best_motifs


def main():
    input_filename = sys.argv[1]
    k,t,DNA = read_input(input_filename)
    result = GreedyMotifSearchPseudocount(DNA, k, t)
    output = format_output(result, 'g')

if __name__ == "__main__":
    main()
